Below is the comprehensive system architecture document for the scalable, event-driven ticketing platform. This document presents an overall view of the system, organized by its major modules and services. It includes a high-level file tree breakdown for each module with descriptions of key files and components, as well as an explanation of how these pieces interact to form the complete system.\n\n---\n\n# Comprehensive System Architecture Document\n\n## 1. Overview\n\nThis ticketing platform is designed as a collection of decoupled microservices communicating through an event-driven architecture using NATS Streaming. The key services include:\n\n• **Auth Service** – Manages user registration, sign in/out, and session management.  \n• **Tickets Service** – Handles ticket creation, update, retrieval, and reservation state.  \n• **Orders Service** – Manages ticket orders including creation, cancellation, and order status updates.  \n• **Payments Service** – Processes payments (via Stripe), records payment events, and updates order status upon successful transactions.  \n• **Expiration Service** – Monitors order lifetimes and issues expiration events to automatically cancel unpaid orders.  \n• **Client** – A Next.js web application acting as the user interface (UI) to access and interact with the backend services.  \n• **Common Module** – Provides shared utilities such as error classes, logging, request validation, authentication middleware, and event abstractions that standardize behavior across all services.  \n• **Infrastructure (Infra)** – Contains Kubernetes deployment manifests for production-level orchestration, service discovery (via Ingress), and connectivity to dependencies like MongoDB, Redis, and NATS.  \n• **NATS Test Module** – A demonstration/test harness for simulating event publishing and consumption using the NATS Streaming platform.\n\n---\n\n## 2. System Components and File Tree Overview\n\nBelow is an abstracted file tree representation of the entire repository. Each directory corresponds to a logical microservice or component group:\n\n```\n.\n├── auth                -> Authentication microservice (user management)\n├── client              -> Next.js web client (UI) for end users\n├── common              -> Shared utilities (errors, events, middlewares, logger)\n├── expiration          -> Service handling order expiration logic\n├── infra               -> Kubernetes resources and cluster configuration\n├── nats-test           -> Test harness for demonstrating NATS event integration\n├── orders              -> Service managing order creation, listing, and cancellation\n├── payments            -> Payment processing service (integrates with Stripe)\n└── tickets             -> Service managing ticket data (creation, update, query)\n```\n\nEach service is built as a standalone Node.js/Express application (except for the client, which is a Next.js app) and leverages common patterns for middleware registration, database (Mongo) connection, and inter-service communication via NATS.\n\n---\n\n## 3. Detailed Module Breakdown\n\n### 3.1 Auth Service\n**Path:** `auth/`\n\n**Purpose:**  \nManages user registration, login, logout, and verifying the current authenticated user by issuing and checking JWTs. It persists user data in MongoDB.\n\n**File Tree & Key Components:**\n```\nauth/\n└── src/\n    ├── app.ts            -> Sets up the Express app, registers middlewares (JSON parsing, cookie-session), and mounts auth routes.\n    ├── index.ts          -> Bootstraps the service: validates environment variables (JWT_KEY, AUTH_MONGO_URI), connects to MongoDB, and starts the HTTP server.\n    ├── models/\n    │   └── user.ts       -> Defines the User schema and model (includes password hashing pre-save logic).\n    ├── routes/\n    │   ├── currentuser.ts -> GET endpoint to return current authenticated user details.\n    │   ├── signin.ts      -> POST endpoint to authenticate users using email/password and issue JWT.\n    │   ├── signout.ts     -> POST endpoint to clear the session (user logout).\n    │   └── signup.ts      -> POST endpoint for user registration.\n    └── utils/\n        └── password.ts   -> Contains password hashing and comparison functions using crypto.\n```\n\n---\n\n### 3.2 Tickets Service\n**Path:** `tickets/`\n\n**Purpose:**  \nHandles ticket lifecycle management (creation, updates, display) and ensures ticket availability is kept in sync with orders. It publishes events when tickets are created or updated and subscribes to order events (e.g., order cancellation/creation) to adjust ticket reservations.\n\n**File Tree & Key Components:**\n```\ntickets/\n└── src/\n    ├── __mocks__/\n    │   └── nats-wrapper.ts          -> Mock implementation of NATS client for testing.\n    ├── app.ts                     -> Configures the Express app; registers ticket routes and common middleware.\n    ├── index.ts                   -> Entry point: validates env variables, connects to MongoDB & NATS; instantiates event listeners; starts server.\n    ├── logger.ts                  -> Configures Winston logger for structured logging.\n    ├── nats-wrapper.ts            -> Abstraction over NATS Streaming client; ensures reliable connection for event publishing/subscription.\n    ├── models/\n    │   └── ticket.ts              -> Mongoose model for Ticket with fields (title, price, userId, optional orderId) and concurrency control.\n    ├── events/\n    │   ├── listeners/\n    │   │   ├── order-created-listener.ts  -> Listens for OrderCreated events; marks ticket as reserved.\n    │   │   └── order-cancelled-listener.ts  -> Listens for OrderCancelled events; clears ticket reservation.\n    │   └── publishers/\n    │       ├── ticket-created-publisher.ts  -> Publishes TicketCreated events upon new ticket creation.\n    │       └── ticket-updated-publisher.ts  -> Publishes TicketUpdated events after ticket modifications.\n    └── routes/\n        ├── index.ts             -> GET endpoint to list all tickets.\n        ├── new.ts               -> POST endpoint to create a new ticket (with authentication and validation).\n        ├── show.ts              -> GET endpoint to retrieve details of a specific ticket.\n        └── update.ts            -> PUT endpoint to update ticket details—ensures only ticket owners or valid non-reserved tickets may be updated.\n```\n\n---\n\n### 3.3 Orders Service\n**Path:** `orders/`\n\n**Purpose:**  \nManages ticket orders: creation, retrieval, and cancellation. It interacts with tickets for data consistency and listens for external events (from Payments, Expiration, and Tickets) to update order status accordingly.\n\n**File Tree & Key Components:**\n```\norders/\n└── src/\n    ├── __mocks__/\n    │   └── nats-wrapper.ts          -> Provides a fake NATS connection interface for tests.\n    ├── app.ts                     -> Sets up Express app; integrates middleware and mounts order-related routes.\n    ├── index.ts                   -> Service bootstrapping: validates env variables; connects to MongoDB and NATS; registers event listeners; starts server.\n    ├── logger.ts                  -> Contains Winston logging configuration.\n    ├── models/\n    │   ├── order.ts               -> Mongoose model for Order; defines fields such as userId, status, expiration, and associated Ticket; uses optimistic concurrency.\n    │   └── ticket.ts              -> Ticket model (local to orders) that tracks tickets reserved in orders; includes helpers to check reservation status.\n    ├── nats-wrapper.ts            -> Wraps NATS client connectivity.\n    ├── events/\n    │   ├── publishers/\n    │   │   ├── order-created-publisher.ts   -> Publishes events when a new order is created.\n    │   │   └── order-cancelled-publisher.ts   -> Publishes events when an order is cancelled.\n    │   └── listeners/\n    │       ├── ticket-created-listener.ts     -> Listens for new tickets and builds local ticket records for order reference.\n    │       ├── ticket-updated-listener.ts     -> Ensures ticket updates propagate to orders.\n    │       ├── expiration-complete-listener.ts -> Listens for ExpirationComplete events, cancelling orders that have timed out.\n    │       └── payment-created-listener.ts    -> Listens for PaymentCreated events to mark orders as complete.\n    └── routes/\n         ├── new.ts                -> Handles new order creation; checks ticket availability and sets expiration.\n         ├── index.ts              -> GET endpoint listing all orders for the current user.\n         ├── show.ts               -> GET endpoint for a specific order’s details.\n         └── delete.ts             -> DELETE endpoint for cancelling an existing order.\n```\n\n---\n\n### 3.4 Payments Service\n**Path:** `payments/`\n\n**Purpose:**  \nProcesses and records payments securely via the Stripe API. It listens for order events and, upon receiving a payment request, charges the user, creates a Payment record, and publishes a PaymentCreated event.\n\n**File Tree & Key Components:**\n```\npayments/\n└── src/\n    ├── __mocks__/\n    │   ├── nats-wrapper.ts          -> Mocks NATS messaging for testing purposes.\n    │   └── stripe.ts                -> Mocks the Stripe API for payment simulation.\n    ├── app.ts                     -> Configures Express app, registers middleware, and mounts the payment creation route.\n    ├── index.ts                   -> Bootstraps the Payments service: validates env variables; connects to MongoDB and NATS; sets up event listeners; starts the server.\n    ├── logger.ts                  -> Sets up structured Winston logging.\n    ├── nats-wrapper.ts            -> Provides an abstraction over the NATS client connection.\n    ├── stripe.ts                  -> Configures and exports the Stripe client (using the secret key).\n    ├── models/\n    │   ├── order.ts               -> Reflects order details for payment validation (mirrors Orders’ order state).\n    │   └── payment.ts             -> Mongoose model that records payment transactions (orderId and Stripe charge id).\n    ├── events/\n    │   ├── publishers/\n    │   │   └── payment-created-publisher.ts -> Publishes PaymentCreated events upon successful charge.\n    │   └── listeners/\n    │       ├── order-created-listener.ts    -> Listens for OrderCreated events to initiate pre-payment processing checks.\n    │       └── order-cancelled-listener.ts    -> Reacts to cancelled orders and potentially voids pending payment flows.\n    └── routes/\n        └── new.ts                 -> POST endpoint that processes a payment charge: validates order state, charges via Stripe, saves Payment record, and publishes a payment event.\n```\n\n---\n\n### 3.5 Expiration Service\n**Path:** `expiration/`\n\n**Purpose:**  \nManages order expiration logic. When an order is created, this service calculates the expiration delay, schedules a job through a Redis-backed queue, and, when time elapses, publishes an event to signal that the order should be cancelled.\n\n**File Tree & Key Components:**\n```\nexpiration/\n└── src/\n    ├── __mocks__/\n    │   └── nats-wrapper.ts          -> Provides a test double for NATS during automated tests.\n    ├── events/\n    │   ├── listeners/\n    │   │   └── order-created-listener.ts  -> Listens for OrderCreated events, schedules expiration jobs in the queue.\n    │   └── publishers/\n    │       └── expiration-complete-publisher.ts -> Publishes ExpirationComplete events when an order’s expiration time is reached.\n    ├── index.ts                   -> Entry point: validates environment, connects to NATS, instantiates the OrderCreatedListener, and sets up graceful shutdown.\n    ├── logger.ts                  -> Configures logging specific to the Expiration service.\n    ├── nats-wrapper.ts            -> Manages connection and retrieval of the NATS client.\n    └── queues/\n        └── expiration-queue.ts    -> Sets up and processes jobs using a Redis-backed queue (using Bull); triggers expiration-complete events when the delay expires.\n```\n\n---\n\n### 3.6 Common Module\n**Path:** `common/`\n\n**Purpose:**  \nProvides shared infrastructure and utilities across services. Its functionality includes consistent error handling, event definitions and base classes, middleware for Express apps (authentication, request validation, error handling), and a centralized logging abstraction.\n\n**File Tree & Key Components:**\n```\ncommon/\n└── src/\n    ├── errors/\n    │   ├── bad-request-error.ts         -> Custom error for HTTP 400 (malformed requests).\n    │   ├── custom-error.ts              -> Base class for all custom errors.\n    │   ├── database-connection-error.ts -> Error class for DB-connection failures.\n    │   ├── not-authorized-error.ts      -> Error for unauthorized access (HTTP 401).\n    │   ├── not-found-error.ts           -> Error for missing resources (HTTP 404).\n    │   └── request-validation-error.ts  -> Aggregates and serializes validation errors.\n    ├── events/\n    │   ├── base-event.ts                -> Interface for events (subject and data).\n    │   ├── base-listener.ts             -> Abstract NATS listener to aid event subscriptions.\n    │   ├── base-publisher.ts            -> Abstract publisher class wrapping the NATS publish method.\n    │   ├── expiration-complete-event.ts -> Defines the expiration complete event structure.\n    │   ├── order-cancelled-event.ts     -> Defines the structure for order cancellation events.\n    │   ├── order-created-event.ts       -> Defines payload for order creation events.\n    │   ├── payment-created-event.ts     -> Defines the structure for payment events.\n    │   ├── subject.ts                   -> Enum for event subjects (e.g., ticket:created, order:cancelled).\n    │   ├── ticket-created-event.ts      -> Defines payload for ticket creation events.\n    │   └── ticket-updated-event.ts      -> Defines payload for ticket update events.\n    ├── middlewares/\n    │   ├── current-user.ts              -> Attaches current user data (via JWT) to incoming requests.\n    │   ├── error-handler.ts             -> Global error-handling middleware; serializes custom errors.\n    │   ├── require-auth.ts              -> Protects endpoints ensuring user is authenticated.\n    │   └── validate-request.ts          -> Validates and aggregates express-validator errors.\n    ├── logger.ts                        -> Centralized configured Winston logger.\n    └── index.ts                         -> Aggregates exports of errors, middlewares, events, and logger for easy access.\n```\n\n---\n\n### 3.7 Client (Next.js Web Interface)\n**Path:** `client/`\n\n**Purpose:**  \nActs as the front-end for the ticketing platform. Built with Next.js, the client handles routing, server-side API calls, and dynamic page rendering for user authentication, ticket browsing, ticket creation, order management, and payment processing.\n\n**File Tree & Key Components:**\n```\nclient/\n├── api/\n│   └── build-client.js           -> Creates an Axios instance configured for client or server environments.\n├── components/\n│   └── header.js                 -> Reusable header/navigation component that adjusts links based on authentication.\n├── hooks/\n│   └── use-request.js            -> Custom React hook to centralize API request logic and error handling.\n├── next.config.js                -> Next.js configuration; sets up webpack polling for increased responsiveness in development.\n└── pages/\n    ├── _app.js                   -> Custom App component; globally includes Bootstrap CSS, layout (header), and currentUser resolution.\n    ├── auth/\n    │   ├── signin.js             -> Sign-in page for existing users.\n    │   ├── signup.js             -> Sign-up page for new user registration.\n    │   └── signout.js            -> Simple page that triggers a signout on mount.\n    ├── banana.js                 -> A test/dummy page used for routing verifications.\n    ├── index.js                  -> Landing page that displays a list of available tickets.\n    ├── orders/\n    │   ├── [orderId].js          -> Dynamic order detail page; includes order expiry countdown and payment integration.\n    │   └── index.js              -> Lists all orders for the logged-in user.\n    └── tickets/\n        ├── [ticketId].js         -> Displays individual ticket details; allows transition to purchase flow.\n        └── new.js                -> Form page for creating (selling) a new ticket.\n```\n\n---\n\n### 3.8 NATS Test Module\n**Path:** `nats-test/`\n\n**Purpose:**  \nProvides a testing harness to verify the NATS Streaming integration. It simulates event-driven behavior by offering a simple publisher and listener for TicketCreated events.\n\n**File Tree & Key Components:**\n```\nnats-test/\n└── src/\n    ├── events/\n    │   ├── ticket-created-listener.ts   -> Implements a listener for TicketCreated events; logs and acknowledges incoming messages.\n    │   └── ticket-created-publisher.ts    -> Implements a publisher for TicketCreated events.\n    ├── listener.ts                      -> Sets up a NATS connection with a unique client ID; instantiates and starts the TicketCreatedListener.\n    └── publisher.ts                     -> Connects to NATS using a fixed client ID; instantiates and publishes a sample TicketCreated event.\n```\n\n---\n\n### 3.9 Infrastructure (Kubernetes)\n**Path:** `infra/k8s/`\n\n**Purpose:**  \nContains Kubernetes manifests to deploy all microservices and supporting infrastructure components. This includes deployments for each service’s container, associated MongoDB or Redis instances, NATS Streaming Server, and an Ingress resource to route external traffic to the proper services.\n\n**File Tree & Key Components:**\n```\ninfra/k8s/\n├── alloy-config.yaml         -> ConfigMap for Grafana Alloy (log processing and forwarding).\n├── alloy-depl.yaml           -> Deployment for Grafana Alloy (log forwarder).\n├── auth-depl.yaml            -> Deployment for the Auth service.\n├── auth-mongo-depl.yaml      -> Deployment for MongoDB instance dedicated to Auth.\n├── client-depl.yaml          -> Deployment for the Next.js client application.\n├── expiration-depl.yaml      -> Deployment for the Expiration service.\n├── expiration-redis-depl.yaml-> Deployment for Redis used by the Expiration service.\n├── ingress-srv.yaml          -> Ingress resource routing external traffic based on URL paths (mapping to /api/* endpoints).\n├── nats-depl.yaml            -> Deployment for the NATS Streaming Server (event bus backbone).\n├── orders-depl.yaml          -> Deployment for the Orders service.\n├── orders-mongo-depl.yaml    -> MongoDB deployment for persisting order data.\n├── payments-depl.yaml        -> Deployment for the Payments service.\n├── payments-mongo-depl.yaml  -> MongoDB deployment for payment records.\n├── tickets-depl.yaml         -> Deployment for the Tickets service.\n└── tickets-mongo-depl.yaml   -> MongoDB deployment for ticket data.\n```\n\n---\n\n## 4. Component Interactions and Overall System Workflow\n\n### Event-Driven Communication  \n• **NATS Streaming Server** (deployed via `nats-depl.yaml`) is at the heart of the event-driven architecture. Every service uses a common **nats-wrapper** module to establish a connection, publish domain events (e.g., TicketCreated, OrderCreated, PaymentCreated, ExpirationComplete), and subscribe to events in order to maintain consistent state across the system.\n\n• **Tickets Service** publishes events (TicketCreated, TicketUpdated) whenever a ticket is added or modified. It also listens for order-related events (via its order-created and order-cancelled listeners) to update the reservation status.\n\n• **Orders Service** creates orders by validating ticket availability (using data populated by ticket events), publishes OrderCreated events after order initiation, and listens to ExpirationComplete and PaymentCreated events to transition order states.\n\n• **Payments Service** consumes order state information (via events from Orders) to verify and process payments using Stripe. Upon a successful transaction, it publishes a PaymentCreated event, indicating that the order has been paid.\n\n• **Expiration Service** listens for OrderCreated events, schedules expiration jobs via a Redis-backed queue, and when an order’s time expires, publishes an ExpirationComplete event. This ensures that unpaid orders are cancelled promptly.\n\n### REST API Interactions  \n• Each service exposes a set of HTTP endpoints (secured with authentication middleware from the **common** module) that clients or other services use to interact with the system:\n\u2003– **Auth Service** manages user sessions.\n\u2003– **Tickets, Orders, and Payments Services** provide REST endpoints for creating, updating, retrieving, and deleting resources.\n\n• The **client** (Next.js app) utilizes the custom API builder (`build-client.js`) and custom hook (`use-request.js`) to call these endpoints. It uses dynamic routing (via Next.js pages) to let users navigate between viewing tickets, placing orders, and processing payments.\n\n### Infrastructure-level Routing  \n• The **Ingress resource** (`ingress-srv.yaml`) directs incoming HTTP requests to the appropriate service based on the URL path (e.g., `/api/users` routes to Auth, `/api/tickets` routes to Tickets).  \n• Kubernetes deployments ensure that each service is scaled and maintained independently, while internal Service resources (and associated MongoDB/Redis deployments) deliver persistent data storage.\n\n### Shared Utilities (Common Module)  \n• The **common** package standardizes error handling, logging, and request validation across all microservices. This ensures consistent responses and simplifies debugging.  \n• Its event base classes (publisher, listener, event interfaces) enable each microservice to interact predictably with the NATS event bus.\n\n---\n\n## 5. How the System Works as a Whole\n\n1. **User Journey:**  \n\u2003– A new user registers or signs in via the Auth service.  \n\u2003– Upon authentication, the user navigates the client to browse available tickets (via the Tickets service) and selects a ticket to purchase.\n\n2. **Order Creation:**  \n\u2003– When a user places an order, the Orders service checks for ticket availability (using its own Ticket model synced from Tickets events) and creates an order with an expiration time.  \n\u2003– An OrderCreated event is published via NATS.\n\n3. **Order Management:**  \n\u2003– The Expiration service, upon receiving the OrderCreated event, schedules a background job. If the payment is not completed in time, it publishes an ExpirationComplete event, leading the Orders service to cancel the order.  \n\u2003– Concurrently, the Orders service listens to PaymentCreated events to mark orders as complete.\n\n4. **Payment Processing:**  \n\u2003– The Payments service verifies the order, processes a charge through Stripe, and upon success, publishes a PaymentCreated event.  \n\u2003– This event flows back to the Orders service to update the order status.\n\n5. **Synchronized Updates:**  \n\u2003– The Tickets service listens to changes from the Orders service (order creation or cancellation) and updates ticket reservation flags accordingly.  \n\u2003– All services use centralized logging (via winston set up in each service and configured in the common module) to provide operational visibility and troubleshooting.\n\n6. **Client Interaction:**  \n\u2003– End users interact with the web client, which seamlessly communicates with backend services using REST APIs.  \n\u2003– The client also relies on session data (authenticated via JWT provided by Auth) to render personalized views and to invoke actions (such as creating tickets, placing orders, or processing payments).\n\n---\n\n## 6. Conclusion\n\nThis document provides a holistic view of the ticketing platform’s architecture. By breaking down each microservice—Auth, Tickets, Orders, Payments, Expiration—as well as the shared Common module, client-side application, NATS testing utilities, and infrastructure definitions, developers and maintainers can navigate the repository easily. The system’s event-driven design and modular implementation ensure that each service can scale independently while maintaining tight integration via a robust messaging layer and common utilities. Whether troubleshooting an API endpoint, adding a new feature, or reconfiguring the runtime environment, all relevant components and their interactions are clearly outlined within this architecture.\n\n--- \n\nThis merged system architecture document should serve as a roadmap both for new developers onboarding onto the project and for experienced developers troubleshooting or extending the system.